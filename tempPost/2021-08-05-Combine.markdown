---
layout: post
title:  "Combine 알아보기"
date:   2021-08-07 08:45:14 +0900
categories: Swift
---
### 소개
안녕하세요 Combine에 대해 한번 알아보겠습니다. Combine은 비동기를 이벤트를 관리할 수 있는 프레임워크 입니다. 
iOS를 개발하다보면 알게 모르게 비동기를 많이 사용합니다. 예를 들어 Button에 Target을 다는 작업도 비동기 작업 이라고 할 수 있습니다.
왜냐하면 유저의 터치 이벤트를 기다리고 있다가, 터치가 발생 한다면 그때서야 실행되기 때문입니다. 사실상 유저의 입력을 기다리는 부분은
다 비동기로 실행되는 것이라고 생각하시면 될 것 같습니다.

``` swift
// 버튼의 touchUPInside event가 발생하면, touchHandler를 실행시킴.
func addTargetToButton() {
    button.addTarget(self, action: #selector(touchHandler),
     for: .touchUpInside)
} 
```

이것말고도 비동기의 대표적인 Network작업을 예를 들어보겠습니다. 서버에서 Data를 받아와야 하는 상황이라면 URLSession을 사용해서 받아오는데요,
함수의 생김새를 한번 볼까요?
``` swift
URLSession.shared.dataTask(with: URL, 
                           completionHandler: (Data?, URLResponse?, Error?) -> Void)
```
함수의 인자로 CompletionHandler를 받습니다. 즉 Request요청을 하고 시간이 지나 데이터를 받아온다면 그 후에 그때 completion을
실행시키는 방법으로 진행됩니다.
Combine은 이 비동기 처리를 선언적인 방법으로 깔끔하게 관리 하게 해주는 Framework입니다. 앞에서 잠깐 설명 드렸지만 Combine이 등장하기 전까지
NotificationCenter, Closure Callback, GCD등 비동기를 처리하는 많은 방법들이 있었지만 이것을 `Combine`이 통합하여 관리할 수 있게 되었습니다.


``` swift
//
//  ContentView.swift
//  studyCharView
//
//  Created by 채훈기 on 2021/08/13.
//

import SwiftUI
import SwiftUICharts

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Hello, world!")
                .padding()
            LineChartView(data: [1,2,3,4,5], title: "test")
            LineView(data: [1,2,1,2,3,4,1])

            BarChartView(data: ChartData(numberValues: [(1,1),(2,2)]), title: "dd")
        }

    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

```

